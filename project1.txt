/*http://www.ece.umd.edu/courses/enee359a/verilog_tutorial.pdf
//need to create clock generator function
always begin
#5 clock = ~clock //toggle every 5 ticks
end
*/

//125 in textbook
module PCMUX(clk, input SR1OUT, input[15:0] add_one, input[1:0] select, output[15:0]PCADDR)
input SR1OUT; //input from register file
input[15:0] add_one; //update PC
input[1:0]select; //select line for the MUX
output [15:0]PCADDR; //chosen output for PC

initial
   begin
	case(select)
	00 : begin 
		assign next_instruction = next_instruction + add_one;
			PCADDR = next_instruction;
		end
	01 : assign PCADDR = SR1OUT;
	10 : //do nothing
	endcase
   end
endmodule

module PC(clk, input MAR, input MARPC, input GATEPC, output next_instruction)
///input clk;
input [15:0] MAR;

input GATEPC;
output [15:0] next_instruction;

initial
   begin
	if(GATEPC == 1 && MARPC == 1)
	{
		assign next_instruction = MAR;
	}
	next_instruction = next_instruction + 1;
   end
endmodule

//memory & MDR
	//put contents of next_instruction in MDR
	//send MDR to IR
//IR
//Register bank/file
//ALU
//Finite State Machine

/*module UserInput(B_INPUT);
	input[15:0] B_INPUT;//vector
//if (BINARY[11] == 1) //ADD RN + data //if more than one line, use begin and end.
//(OPCODE, RN, DATA) = INSTRUCTION
//$write(""); //%b is binary value
	//reg [3:0] OPERATION;
	//reg FLAG;
	//reg[2:0] REGISTER1;
	//reg[2:0] REGISTER2;
	//reg[7:0] DATA;
	//reg[7:0] ADDRESS;
always@(*)
begin
	casez(B_INPUT)
		  
		16'b00001???????????: 
			begin
			//assign{OPERATION, FLAG, REGISTER1, DATA} = BINARY_INPUT;
			$display("ADD Rn, #data\n");
			end
		 
		16'b00000???0???????:
			begin
			$display("ADD Rn, address\n");
			end
 		  //5432109876543210
		16'b00000???000010??:
			begin
			$display("ADD Rn, @Ri");
			end	
endcase
end
endmodule*/