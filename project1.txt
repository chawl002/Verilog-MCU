/*http://www.ece.umd.edu/courses/enee359a/verilog_tutorial.pdf
//need to create clock generator function
always begin
#5 clock = ~clock //toggle every 5 ticks
end
*/

//125 in textbook
module PCMUX(SR1OUT, add_one, next_instruction, select, PCADDR);

input[15:0] SR1OUT; //input from register file
input[15:0] add_one; //update PC
input[15:0] next_instruction;
input[1:0] select; //select line for the MUX
output[15:0]PCADDR; //chosen output for PC

initial
   begin
	case(select)
	00 : begin 
		next_instruction = next_instruction + add_one;
		PCADDR = next_instruction;
	     end
	01 : PCADDR = SR1OUT;
	//10 : //do nothing
	endcase
   end
endmodule

module PC(MAR, MARPC, GATEPC, next_instruction);
///input clk;
input[15:0] MAR;
input MARPC;
input GATEPC;
output[15:0] next_instruction;

//reg[15:0] MAR, next_instruction;
//reg MARPC, GATEPC;

initial
   begin
	if(GATEPC == 1 && MARPC == 1) MAR <= next_instruction;
	
	assign next_instruction = next_instruction + 1;
   end
endmodule

//memory & MDR
	//put contents of next_instruction in MDR
	//send MDR to IR

module memory(MAR, LDMDR, GATEMDR, MDR, j);
input [15:0] MAR;
input LDMDR;
input GATEMDR;
output reg[15:0] MDR;
reg [15:0] read_file;
reg[15:0] it = 0000000000000000;
input j;
//m[mar] = mdr //use file with instructions.
//taken from: http://www.fullchipdesign.com/verilog_file_open_close.htm
always@(it)
   begin
	casez(j)
	0: begin//MDR = mem[MAR]
   		if(it == MAR)
		begin 
			read_file = $fopen("testbench.txt", r);
		end
	   end
	//1: //write to testbench put MDR in memory
	endcase	
	it <= it + 1;
   end
initial
   begin
	if(LDMDR == 1 && GATEMDR == 1) MDR = read_file;
	$fclose(readme.txt);
   end
endmodule
//IR
//Register bank/file
//ALU
//Finite State Machine

/*module UserInput(B_INPUT);
	input[15:0] B_INPUT;//vector
//if (BINARY[11] == 1) //ADD RN + data //if more than one line, use begin and end.
//(OPCODE, RN, DATA) = INSTRUCTION
//$write(""); //%b is binary value
	//reg [3:0] OPERATION;
	//reg FLAG;
	//reg[2:0] REGISTER1;
	//reg[2:0] REGISTER2;
	//reg[7:0] DATA;
	//reg[7:0] ADDRESS;
always@(*)
begin
	casez(B_INPUT)
		  
		16'b00001???????????: 
			begin
			//assign{OPERATION, FLAG, REGISTER1, DATA} = BINARY_INPUT;
			$display("ADD Rn, #data\n");
			end
		 
		16'b00000???0???????:
			begin
			$display("ADD Rn, address\n");
			end
 		  //5432109876543210
		16'b00000???000010??:
			begin
			$display("ADD Rn, @Ri");
			end	
endcase
end
endmodule*/